{"version":3,"sources":["logo.svg","Components/Form.js","Components/Header.js","Components/To-Do-List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","className","onSubmit","this","props","handleSubmit","type","Component","Header","List","lists","map","list","index","key","onClick","e","deleteList","App","event","preventDefault","todo","target","value","setState","prevState","todos","state","splice","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,4ICe5BC,G,6KAXP,OACI,0BAAMC,UAAU,OAAOC,SAAUC,KAAKC,MAAMC,cACxC,2BAAQC,KAAK,SACb,4BAAQA,KAAK,UACb,uBAAGL,UAAW,8B,GANXM,cCSJC,E,uKAPP,OACI,yBAAKP,UAAU,UACX,+C,GAJKM,aCqBNE,E,uKAnBF,IAAD,OACJ,OACI,yBAAKR,UAAU,kBACX,8BACA,wBAAIA,UAAU,aACTE,KAAKC,MAAMM,MAAMC,KAAI,SAACC,EAAMC,GACzB,OAAO,wBAAIZ,UAAU,aAAaa,IAAKD,GAAQD,EAC/C,4BAAQG,QAAS,SAACC,GAAD,OAAO,EAAKZ,MAAMa,WAAWD,EAAEH,KAAQ,uBAAGZ,UAAU,6B,GAT1EM,aCiDJW,G,wDA1Cb,WAAYd,GAAO,IAAD,8BAChB,cAAMA,IASRC,aAAe,SAACc,GAEdA,EAAMC,iBACN,IAAIC,EAAOF,EAAMG,OAAO,GAAGC,MACjB,IAAPF,GACD,EAAKG,UAAS,SAACC,GACb,MAAO,CAACC,MAAM,GAAD,mBAAM,EAAKC,MAAMD,OAAjB,CAAwBL,QAIzCF,EAAMG,OAAO,GAAGC,MAAQ,IApBR,EAuBlBN,WAAa,SAACE,EAAMN,GAClBM,EAAMC,iBACN,IAAMC,EAAO,EAAKM,MAAMD,MACxBL,EAAKO,OAAOf,EAAM,GAClB,EAAKW,SAAS,CAACH,KAAK,YAAKA,MAzBzB,EAAKM,MAAQ,CACXD,MAAQ,IAGV,EAAKrB,aAAe,EAAKA,aAAawB,KAAlB,gBACpB,EAAKZ,WAAa,EAAKA,WAAWY,KAAhB,gBAPF,E,qDA+BhB,OACE,yBAAK5B,UAAU,OACd,kBAAC,EAAD,MACC,kBAAC,EAAD,CAAOI,aAAcF,KAAKE,eAE1B,kBAAC,EAAD,CAAMK,MAAOP,KAAKwB,MAAMD,MAAOT,WAAYd,KAAKc,kB,GArCtCV,cCIEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f5c7a0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n    render(){\r\n        return(\r\n            <form className=\"form\" onSubmit={this.props.handleSubmit}>\r\n                <input  type=\"text\" />\r\n                <button type=\"submit\">\r\n                <i className= \"fas fa-plus-square \"></i>\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","import React, { Component } from 'react'\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"header\">\r\n                <h1>To-Do List</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Header","import React, { Component } from 'react'\r\n\r\nclass List extends Component{\r\n    \r\n    render(){\r\n        return(\r\n            <div className='list-container'>\r\n                <form>\r\n                <ul className=\"listClass\">\r\n                    {this.props.lists.map((list, index) => {\r\n                        return <ol className=\"list swing\" key={index}>{list}\r\n                        <button onClick={(e) => this.props.deleteList(e,index)}><i className=\"fas fa-trash\"></i></button>\r\n                        </ol>\r\n\r\n                    })}\r\n                </ul>\r\n                </form>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Form from './Components/Form'\nimport Header from './Components/Header'\nimport List from './Components/To-Do-List'\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      todos : [],\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.deleteList = this.deleteList.bind(this);\n  }\n  \n  handleSubmit = (event) =>{\n\n    event.preventDefault();\n    let todo = event.target[0].value;\n    if(todo !=''){\n      this.setState((prevState) =>{ \n        return {todos: [...this.state.todos, todo]}\n      });\n    }\n    \n    event.target[0].value = ''\n\n  }\n  deleteList = (event,index) => {\n    event.preventDefault();\n    const todo = this.state.todos\n    todo.splice(index,1) \n    this.setState({todo: [...todo]})\n   \n  }\n  render(){\n    return(\n      <div className='App'>\n       <Header/>\n        <Form  handleSubmit={this.handleSubmit}  />\n        \n        <List lists={this.state.todos} deleteList={this.deleteList}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}